package fcrmerkletree

/*
 * Copyright 2020 ConsenSys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import (
	"encoding/json"
	"math/big"
	"testing"

	"github.com/ConsenSys/fc-retrieval-common/pkg/cid"
	"github.com/cbergoon/merkletree"
	"github.com/stretchr/testify/assert"
)

func TestCreateMerkleProof(t *testing.T) {
	cid1, err := cid.NewContentIDFromHexString("01")
	assert.Empty(t, err)
	cid2, err := cid.NewContentIDFromHexString("02")
	assert.Empty(t, err)
	cid3, err := cid.NewContentIDFromHexString("03")
	assert.Empty(t, err)
	cid4, err := cid.NewContentIDFromHexString("04")
	assert.Empty(t, err)
	cid5, err := cid.NewContentIDFromHexString("05")
	assert.Empty(t, err)
	tree, err := CreateMerkleTree([]merkletree.Content{cid1, cid2, cid3, cid4, cid5})
	assert.Empty(t, err)
	assert.NotEmpty(t, tree)

	proof, err := tree.GenerateMerkleProof(cid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)
	assert.True(t, proof.VerifyContent(cid1, tree.GetMerkleRoot()))

	proof, err = tree.GenerateMerkleProof(cid2)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)
	assert.True(t, proof.VerifyContent(cid2, tree.GetMerkleRoot()))

	proof, err = tree.GenerateMerkleProof(cid3)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)
	assert.True(t, proof.VerifyContent(cid3, tree.GetMerkleRoot()))

	proof, err = tree.GenerateMerkleProof(cid4)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)
	assert.True(t, proof.VerifyContent(cid4, tree.GetMerkleRoot()))

	proof, err = tree.GenerateMerkleProof(cid5)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)
	assert.True(t, proof.VerifyContent(cid5, tree.GetMerkleRoot()))

	cid6, err := cid.NewContentIDFromHexString("06")
	assert.Empty(t, err)
	proof, err = tree.GenerateMerkleProof(cid6)
	assert.Empty(t, err)
	assert.Empty(t, proof)
	assert.False(t, proof.VerifyContent(cid6, tree.GetMerkleRoot()))
}

func TestCreateMerkleProofOneElement(t *testing.T) {
	cid1, err := cid.NewContentIDFromHexString("01")
	assert.Empty(t, err)

	tree, err := CreateMerkleTree([]merkletree.Content{cid1})
	assert.Empty(t, err)
	assert.NotEmpty(t, tree)

	proof, err := tree.GenerateMerkleProof(cid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)
	assert.True(t, proof.VerifyContent(cid1, tree.GetMerkleRoot()))
}

func TestCreateMerkleProofManyElement(t *testing.T) {
	elements := make([]merkletree.Content, 0)
	for i := 0; i < 100; i++ {
		cid, err := cid.NewContentID(big.NewInt(int64(i)))
		assert.Empty(t, err)
		elements = append(elements, cid)
	}
	tree, err := CreateMerkleTree(elements)
	assert.Empty(t, err)
	assert.NotEmpty(t, tree)
	root := tree.GetMerkleRoot()

	for i := 0; i < 100; i++ {
		proof, err := tree.GenerateMerkleProof(elements[i])
		assert.Empty(t, err)
		assert.NotEmpty(t, proof)
		assert.True(t, proof.VerifyContent(elements[i], root))
	}

	cidX, err := cid.NewContentID(big.NewInt(101))
	assert.Empty(t, err)
	proof, err := tree.GenerateMerkleProof(cidX)
	assert.Empty(t, err)
	assert.Empty(t, proof)
	assert.False(t, proof.VerifyContent(cidX, tree.GetMerkleRoot()))
}

func TestJSON(t *testing.T) {
	cid1, err := cid.NewContentIDFromHexString("01")
	assert.Empty(t, err)
	cid2, err := cid.NewContentIDFromHexString("02")
	assert.Empty(t, err)
	cid3, err := cid.NewContentIDFromHexString("03")
	assert.Empty(t, err)
	cid4, err := cid.NewContentIDFromHexString("04")
	assert.Empty(t, err)
	cid5, err := cid.NewContentIDFromHexString("05")
	assert.Empty(t, err)
	tree, err := CreateMerkleTree([]merkletree.Content{cid1, cid2, cid3, cid4, cid5})
	assert.Empty(t, err)
	assert.NotEmpty(t, tree)

	proof, err := tree.GenerateMerkleProof(cid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, proof)

	p, err := proof.MarshalJSON()
	assert.Empty(t, err)
	assert.Equal(t, []byte{0x22, 0x41, 0x41, 0x41, 0x41, 0x6a,
		0x6c, 0x73, 0x69, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42,
		0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51,
		0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x53, 0x54, 0x30, 0x69,
		0x4c, 0x43, 0x49, 0x79, 0x5a, 0x33, 0x70, 0x58, 0x63,
		0x32, 0x63, 0x34, 0x4c, 0x30, 0x52, 0x54, 0x4e, 0x54,
		0x68, 0x43, 0x51, 0x54, 0x5a, 0x73, 0x4d, 0x55, 0x4a,
		0x49, 0x4b, 0x7a, 0x42, 0x43, 0x65, 0x53, 0x74, 0x6f,
		0x59, 0x54, 0x68, 0x79, 0x4d, 0x30, 0x52, 0x43, 0x63,
		0x44, 0x45, 0x35, 0x52, 0x31, 0x4a, 0x43, 0x65, 0x6e,
		0x52, 0x4d, 0x4d, 0x48, 0x46, 0x6a, 0x50, 0x53, 0x49,
		0x73, 0x49, 0x6d, 0x46, 0x31, 0x52, 0x30, 0x5a, 0x4d,
		0x57, 0x6d, 0x4a, 0x4d, 0x64, 0x33, 0x64, 0x6d, 0x55,
		0x6c, 0x68, 0x42, 0x4d, 0x30, 0x31, 0x6d, 0x63, 0x56,
		0x52, 0x75, 0x5a, 0x56, 0x46, 0x7a, 0x51, 0x6b, 0x56,
		0x68, 0x64, 0x57, 0x4a, 0x51, 0x5a, 0x54, 0x46, 0x45,
		0x4d, 0x46, 0x52, 0x72, 0x59, 0x56, 0x52, 0x7a, 0x53,
		0x55, 0x46, 0x6a, 0x59, 0x32, 0x63, 0x39, 0x49, 0x6c,
		0x30, 0x41, 0x41, 0x41, 0x41, 0x48, 0x57, 0x7a, 0x45,
		0x73, 0x4d, 0x53, 0x77, 0x78, 0x58, 0x51, 0x3d, 0x3d,
		0x22}, p)
	proof2 := FCRMerkleProof{}
	err = proof2.UnmarshalJSON(p)
	assert.Empty(t, err)
	assert.Equal(t, proof.index, proof2.index)
	assert.Equal(t, proof.path, proof2.path)
}

func TestJSONError(t *testing.T) {
	p := []byte{0x22, 0x41, 0x41, 0x41, 0x41, 0x6a,
		0x6c, 0x73, 0x69, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42,
		0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51,
		0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x53, 0x54, 0x30, 0x69,
		0x4c, 0x43, 0x49, 0x79, 0x5a, 0x33, 0x70, 0x58, 0x63,
		0x32, 0x63, 0x34, 0x4c, 0x30, 0x52, 0x54, 0x4e, 0x54,
		0x68, 0x43, 0x51, 0x54, 0x5a, 0x73, 0x4d, 0x55, 0x4a,
		0x49, 0x4b, 0x7a, 0x42, 0x43, 0x65, 0x53, 0x74, 0x6f,
		0x59, 0x54, 0x68, 0x79, 0x4d, 0x30, 0x52, 0x43, 0x63,
		0x44, 0x45, 0x35, 0x52, 0x31, 0x4a, 0x43, 0x65, 0x6e,
		0x52, 0x4d, 0x4d, 0x48, 0x46, 0x6a, 0x50, 0x53, 0x49,
		0x73, 0x49, 0x6d, 0x46, 0x31, 0x52, 0x30, 0x5a, 0x4d,
		0x57, 0x6d, 0x4a, 0x4d, 0x64, 0x33, 0x64, 0x6d, 0x55,
		0x6c, 0x68, 0x42, 0x4d, 0x30, 0x31, 0x6d, 0x63, 0x56,
		0x52, 0x75, 0x5a, 0x56, 0x46, 0x7a, 0x51, 0x6b, 0x56,
		0x68, 0x64, 0x57, 0x4a, 0x51, 0x5a, 0x54, 0x46, 0x45,
		0x4d, 0x46, 0x52, 0x72, 0x59, 0x56, 0x52, 0x7a, 0x53,
		0x55, 0x46, 0x6a, 0x59, 0x32, 0x63, 0x39, 0x49, 0x6c,
		0x30, 0x41, 0x41, 0x41, 0x41, 0x48, 0x57, 0x7a, 0x45,
		0x73, 0x4d, 0x53, 0x77, 0x78, 0x58, 0x51, 0x3d, 0x3d,
		0x22}
	proof := FCRMerkleProof{}
	err := proof.UnmarshalJSON(p)
	assert.Empty(t, err)
	p[0] = 0
	err = proof.UnmarshalJSON(p)
	assert.NotEmpty(t, err)

	p, err = json.Marshal([]byte{0x22, 0x41})
	assert.Empty(t, err)
	proof = FCRMerkleProof{}
	err = proof.UnmarshalJSON(p)
	assert.NotEmpty(t, err)

	p, err = json.Marshal([]byte{0x00, 0x00, 0x00, 0x01, 0x00})
	err = proof.UnmarshalJSON(p)
	assert.NotEmpty(t, err)

	p, err = json.Marshal([]byte{0x00, 0x00, 0x00, 0x01, 0x00, 0x01})
	err = proof.UnmarshalJSON(p)
	assert.NotEmpty(t, err)
}
