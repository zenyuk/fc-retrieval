# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
parameters:
  repox-branch:
    type: string
    default: ""
commands:
  getrepobranch:
    description: "Get correct branch on repo"
    parameters:
      repo:
        type: string
      workdir:
        type: string
    steps:
      # git clone the repos and switch to a branch which matches the 
      # name of the branch on the Client repo. If no such branch exists, just use main
      - run: 
          name: "Git clone repo << parameters.repo >>"
          command: |
              git clone << parameters.repo >>
          working_directory: /go/src/github.com/ConsenSys/
      - run: 
          name: "Git get correct branch for << parameters.repo >>"
          #head=$(git --git-dir=fc-retrieval-gateway/.git rev-parse HEAD)
          #git --git-dir=fc-retrieval-gateway/.git reset --hard "$head"
          command: |
              BRANCH=$CIRCLE_BRANCH
              if [ -z "$BRANCH" ]; then
                echo Using main
                BRANCH=main
              else 
                existed_in_local=$(git branch -r --list origin/"$BRANCH")
                if [ -z "$existed_in_local" ]; then 
                  echo << parameters.repo >> repo branch is main
                else 
                  echo << parameters.repo >> branch is "$BRANCH"
                  git fetch
                  git checkout "$BRANCH"
                fi
              fi
              # echo to the screen the git hash
              git rev-parse HEAD
          working_directory: << parameters.workdir >>

jobs:
  integrationtest:
    docker:
      # specify the version
      - image: circleci/golang:1.15
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/ConsenSys/fc-retrieval-itest/
    steps:
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-itest"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-itest"
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-client"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-client"
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-gateway"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-gateway"
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-gateway-admin"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-gateway-admin"
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-provider"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-provider"
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-provider-admin"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-provider-admin"
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-register"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-register"
      - run:
          name: Register - Use remote config
          command: make useremote
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-register/
      - run:
          name: Provider - Use remote config
          command: make useremote
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-provider/
      - run:
          name: Client - Use remote config
          command: make useremote
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-client/
      - run:
          name: Gateway Admin - Use remote config
          command: make useremote
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-gateway-admin/
      - run:
          name: ITest - Use remote config
          command: make useremote
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-itest/
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run: 
          command: cat go.mod
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-itest/
      - run: 
          command: cat go.mod
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-client/
      - run: 
          name: Make Integration Tests
          command: make clean build
      - run:
          name: Make Gateway
          command: make clean build
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-gateway/
      - run:
          name: Make Provider
          command: make clean build
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-provider/
      - run:
          name: Make Register
          command: make clean build
          working_directory: /go/src/github.com/ConsenSys/fc-retrieval-register/
      - run: 
          name: Run Itegration Tests
          command: make itest
          no_output_timeout: 30s
      - run:
          name: Display Gateway Container Log
          command: docker container logs gateway

  # Do a local build first, just to make sure the integration test code builds.
  localbuild:
    docker:
      - image: circleci/golang:1.15
    environment:
      REPOBRANCH: << pipeline.parameters.repox-branch >>
    working_directory: /go/src/github.com/ConsenSys/fc-retrieval-itest/
    steps:
      - getrepobranch:
          repo: "https://github.com/ConsenSys/fc-retrieval-itest"
          workdir: "/go/src/github.com/ConsenSys/fc-retrieval-itest"
      - run: make lbuild

  # check parameter passing
  checkparam:
    docker:
      - image: circleci/golang:1.15
    environment:
      REPOBRANCH: << pipeline.parameters.repox-branch >>
    working_directory: /go/src/github.com/ConsenSys/fc-retrieval-itest/
    steps:
      - run: 
          name: "Check parameters"
          command: |
            echo "pipeline.parameters.repox-branch: ${REPOBRANCH}"
            echo Circle Branch: $CIRCLE_BRANCH


workflows:
  version: 2
  test_and_release:
    jobs:
      - localbuild
      - integrationtest:
          requires:
            - localbuild
