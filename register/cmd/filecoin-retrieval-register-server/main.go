// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"os"

	"github.com/ConsenSys/fc-retrieval-register/config"
	"github.com/ConsenSys/fc-retrieval-register/internal/logger"
	"github.com/ConsenSys/fc-retrieval-register/restapi"
	"github.com/ConsenSys/fc-retrieval-register/restapi/operations"
	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"
	_ "github.com/joho/godotenv/autoload"
	log "github.com/rs/zerolog/log"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	conf := config.Config()
  logger.InitLogger(conf)

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatal().Err(err).Msg("Swagger not loaded")
	}

	api := operations.NewFilecoinRetrievalRegisterAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Filecoin Retrieval Register"
	parser.LongDescription = "Retrieval Providers and Retrieval Gateways register.\n"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatal().Err(err).Msg("Command line groups not added")
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatal().Err(err).Msg("Server not started")
	}
}
