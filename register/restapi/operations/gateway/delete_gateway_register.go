// Code generated by go-swagger; DO NOT EDIT.

package gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteGatewayRegisterHandlerFunc turns a function with the right signature into a delete gateway register handler
type DeleteGatewayRegisterHandlerFunc func(DeleteGatewayRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteGatewayRegisterHandlerFunc) Handle(params DeleteGatewayRegisterParams) middleware.Responder {
	return fn(params)
}

// DeleteGatewayRegisterHandler interface for that can handle valid delete gateway register params
type DeleteGatewayRegisterHandler interface {
	Handle(DeleteGatewayRegisterParams) middleware.Responder
}

// NewDeleteGatewayRegister creates a new http.Handler for the delete gateway register operation
func NewDeleteGatewayRegister(ctx *middleware.Context, handler DeleteGatewayRegisterHandler) *DeleteGatewayRegister {
	return &DeleteGatewayRegister{Context: ctx, Handler: handler}
}

/* DeleteGatewayRegister swagger:route DELETE /registers/gateway Gateway deleteGatewayRegister

Delete Gateway registers

<b>Delete Gateway registers</b>

*/
type DeleteGatewayRegister struct {
	Context *middleware.Context
	Handler DeleteGatewayRegisterHandler
}

func (o *DeleteGatewayRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteGatewayRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
