// Code generated by go-swagger; DO NOT EDIT.

package provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddProviderRegisterHandlerFunc turns a function with the right signature into a add provider register handler
type AddProviderRegisterHandlerFunc func(AddProviderRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddProviderRegisterHandlerFunc) Handle(params AddProviderRegisterParams) middleware.Responder {
	return fn(params)
}

// AddProviderRegisterHandler interface for that can handle valid add provider register params
type AddProviderRegisterHandler interface {
	Handle(AddProviderRegisterParams) middleware.Responder
}

// NewAddProviderRegister creates a new http.Handler for the add provider register operation
func NewAddProviderRegister(ctx *middleware.Context, handler AddProviderRegisterHandler) *AddProviderRegister {
	return &AddProviderRegister{Context: ctx, Handler: handler}
}

/* AddProviderRegister swagger:route POST /registers/provider Provider addProviderRegister

Add a Provider register

<b>Add a Provider register</b>

*/
type AddProviderRegister struct {
	Context *middleware.Context
	Handler AddProviderRegisterHandler
}

func (o *AddProviderRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddProviderRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
