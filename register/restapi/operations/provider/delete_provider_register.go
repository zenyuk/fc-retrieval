// Code generated by go-swagger; DO NOT EDIT.

package provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteProviderRegisterHandlerFunc turns a function with the right signature into a delete provider register handler
type DeleteProviderRegisterHandlerFunc func(DeleteProviderRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProviderRegisterHandlerFunc) Handle(params DeleteProviderRegisterParams) middleware.Responder {
	return fn(params)
}

// DeleteProviderRegisterHandler interface for that can handle valid delete provider register params
type DeleteProviderRegisterHandler interface {
	Handle(DeleteProviderRegisterParams) middleware.Responder
}

// NewDeleteProviderRegister creates a new http.Handler for the delete provider register operation
func NewDeleteProviderRegister(ctx *middleware.Context, handler DeleteProviderRegisterHandler) *DeleteProviderRegister {
	return &DeleteProviderRegister{Context: ctx, Handler: handler}
}

/* DeleteProviderRegister swagger:route DELETE /registers/provider Provider deleteProviderRegister

Delete Provider registers

<b>Delete Provider registers</b>

*/
type DeleteProviderRegister struct {
	Context *middleware.Context
	Handler DeleteProviderRegisterHandler
}

func (o *DeleteProviderRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteProviderRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
