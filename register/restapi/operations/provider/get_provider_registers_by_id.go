// Code generated by go-swagger; DO NOT EDIT.

package provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProviderRegistersByIDHandlerFunc turns a function with the right signature into a get provider registers by Id handler
type GetProviderRegistersByIDHandlerFunc func(GetProviderRegistersByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProviderRegistersByIDHandlerFunc) Handle(params GetProviderRegistersByIDParams) middleware.Responder {
	return fn(params)
}

// GetProviderRegistersByIDHandler interface for that can handle valid get provider registers by Id params
type GetProviderRegistersByIDHandler interface {
	Handle(GetProviderRegistersByIDParams) middleware.Responder
}

// NewGetProviderRegistersByID creates a new http.Handler for the get provider registers by Id operation
func NewGetProviderRegistersByID(ctx *middleware.Context, handler GetProviderRegistersByIDHandler) *GetProviderRegistersByID {
	return &GetProviderRegistersByID{Context: ctx, Handler: handler}
}

/* GetProviderRegistersByID swagger:route GET /registers/provider/{id} Provider getProviderRegistersById

Get registered Provider by Id

<b>Get a provider register by Id</b>

*/
type GetProviderRegistersByID struct {
	Context *middleware.Context
	Handler GetProviderRegistersByIDHandler
}

func (o *GetProviderRegistersByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProviderRegistersByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
