// Code generated by go-swagger; DO NOT EDIT.

package registers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddRegisterHandlerFunc turns a function with the right signature into a add register handler
type AddRegisterHandlerFunc func(AddRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddRegisterHandlerFunc) Handle(params AddRegisterParams) middleware.Responder {
	return fn(params)
}

// AddRegisterHandler interface for that can handle valid add register params
type AddRegisterHandler interface {
	Handle(AddRegisterParams) middleware.Responder
}

// NewAddRegister creates a new http.Handler for the add register operation
func NewAddRegister(ctx *middleware.Context, handler AddRegisterHandler) *AddRegister {
	return &AddRegister{Context: ctx, Handler: handler}
}

/* AddRegister swagger:route POST /registers/{type} Registers addRegister

Add a register

<b>Add a register</b>

*/
type AddRegister struct {
	Context *middleware.Context
	Handler AddRegisterHandler
}

func (o *AddRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
