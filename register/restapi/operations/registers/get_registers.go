// Code generated by go-swagger; DO NOT EDIT.

package registers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRegistersHandlerFunc turns a function with the right signature into a get registers handler
type GetRegistersHandlerFunc func(GetRegistersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRegistersHandlerFunc) Handle(params GetRegistersParams) middleware.Responder {
	return fn(params)
}

// GetRegistersHandler interface for that can handle valid get registers params
type GetRegistersHandler interface {
	Handle(GetRegistersParams) middleware.Responder
}

// NewGetRegisters creates a new http.Handler for the get registers operation
func NewGetRegisters(ctx *middleware.Context, handler GetRegistersHandler) *GetRegisters {
	return &GetRegisters{Context: ctx, Handler: handler}
}

/*GetRegisters swagger:route GET /registers/{type} Registers getRegisters

Get register list

<b>Get register list</b>

*/
type GetRegisters struct {
	Context *middleware.Context
	Handler GetRegistersHandler
}

func (o *GetRegisters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRegistersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
