package cidoffer

/*
 * Copyright 2020 ConsenSys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import (
	"math/big"
	"testing"
	"time"

	"github.com/ConsenSys/fc-retrieval-common/pkg/cid"
	"github.com/ConsenSys/fc-retrieval-common/pkg/fcrcrypto"
	"github.com/ConsenSys/fc-retrieval-common/pkg/nodeid"
	"github.com/stretchr/testify/assert"
)

func TestNewSubCIDOfferWithGet(t *testing.T) {
	aNodeID, err := nodeid.NewNodeID(big.NewInt(7))
	assert.Empty(t, err)
	aCid1, err := cid.NewContentID(big.NewInt(7))
	assert.Empty(t, err)
	aCid2, err := cid.NewContentID(big.NewInt(8))
	assert.Empty(t, err)
	aCid3, err := cid.NewContentID(big.NewInt(9))
	assert.Empty(t, err)
	cids := []cid.ContentID{*aCid1, *aCid2, *aCid3}
	price := uint64(5)
	expiry := int64(10)
	qos := uint64(5)
	offer, err := NewCIDOffer(aNodeID, cids, price, expiry, qos)
	assert.Empty(t, err)
	subOffer, err := offer.GenerateSubCIDOffer(aCid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, subOffer)

	assert.Equal(t, aNodeID, subOffer.GetProviderID())
	assert.Equal(t, aCid1, subOffer.GetSubCID())
	assert.Equal(t, offer.merkleRoot, subOffer.GetMerkleRoot())
	assert.Equal(t, price, subOffer.GetPrice())
	assert.Equal(t, expiry, subOffer.GetExpiry())
	assert.Equal(t, qos, subOffer.GetQoS())
	assert.Equal(t, offer.GetSignature(), subOffer.GetSignature())
	p, err := subOffer.GetMerkleProof().MarshalJSON()
	assert.Empty(t, err)
	assert.Equal(t, []byte{0x22, 0x41, 0x41, 0x41, 0x41, 0x58,
		0x31, 0x73, 0x69, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42,
		0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51,
		0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x5a, 0x7a, 0x30, 0x69,
		0x4c, 0x43, 0x4a, 0x6a, 0x52, 0x30, 0x31, 0x55, 0x63,
		0x57, 0x4d, 0x32, 0x62, 0x30, 0x6c, 0x56, 0x52, 0x55,
		0x68, 0x48, 0x61, 0x6b, 0x39, 0x6f, 0x4f, 0x53, 0x74,
		0x78, 0x64, 0x6b, 0x4e, 0x75, 0x5a, 0x48, 0x4e, 0x31,
		0x64, 0x32, 0x73, 0x77, 0x4b, 0x79, 0x74, 0x73, 0x57,
		0x48, 0x42, 0x32, 0x4e, 0x56, 0x6c, 0x59, 0x4e, 0x6b,
		0x35, 0x77, 0x51, 0x6d, 0x46, 0x6e, 0x50, 0x53, 0x4a,
		0x64, 0x41, 0x41, 0x41, 0x41, 0x42, 0x56, 0x73, 0x78,
		0x4c, 0x44, 0x46, 0x64, 0x22}, p)
}

func TestSubOfferHasExpired(t *testing.T) {
	aNodeID, err := nodeid.NewNodeID(big.NewInt(7))
	assert.Empty(t, err)
	aCid1, err := cid.NewContentID(big.NewInt(7))
	assert.Empty(t, err)
	aCid2, err := cid.NewContentID(big.NewInt(8))
	assert.Empty(t, err)
	aCid3, err := cid.NewContentID(big.NewInt(9))
	assert.Empty(t, err)
	cids := []cid.ContentID{*aCid1, *aCid2, *aCid3}
	price := uint64(5)
	expiry := time.Now().Add(12 * time.Hour).Unix()
	qos := uint64(5)
	offer, err := NewCIDOffer(aNodeID, cids, price, expiry, qos)
	assert.Empty(t, err)
	subOffer, err := offer.GenerateSubCIDOffer(aCid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, subOffer)

	assert.False(t, subOffer.HasExpired())
	subOffer.expiry = time.Now().Add(-12 * time.Hour).Unix()
	assert.True(t, subOffer.HasExpired())
}

func TestSubOfferVerify(t *testing.T) {
	aNodeID, err := nodeid.NewNodeID(big.NewInt(7))
	assert.Empty(t, err)
	aCid1, err := cid.NewContentID(big.NewInt(7))
	assert.Empty(t, err)
	aCid2, err := cid.NewContentID(big.NewInt(8))
	assert.Empty(t, err)
	aCid3, err := cid.NewContentID(big.NewInt(9))
	assert.Empty(t, err)
	cids := []cid.ContentID{*aCid1, *aCid2, *aCid3}
	price := uint64(5)
	expiry := int64(9_223_372_030_000_000_000)
	qos := uint64(5)
	offer, err := NewCIDOffer(aNodeID, cids, price, expiry, qos)
	privKey, err := fcrcrypto.DecodePrivateKey(PrivKey)
	assert.Empty(t, err)
	err = offer.Sign(privKey, fcrcrypto.InitialKeyVersion())
	assert.Empty(t, err)

	subOffer, err := offer.GenerateSubCIDOffer(aCid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, subOffer)

	pubKey, err := fcrcrypto.DecodePublicKey(PubKey)
	assert.Empty(t, err)
	assert.Empty(t, subOffer.Verify(pubKey))

	pubKey, err = fcrcrypto.DecodePublicKey(PubKeyWrong)
	assert.Empty(t, err)
	err = subOffer.Verify(pubKey)
	assert.NotEmpty(t, err)

	assert.Empty(t, subOffer.VerifyMerkleProof())
	subOffer.subCID = aCid2
	assert.NotEmpty(t, subOffer.VerifyMerkleProof())
}

func TestJSONSubOffer(t *testing.T) {
	aNodeID, err := nodeid.NewNodeID(big.NewInt(7))
	assert.Empty(t, err)
	aCid1, err := cid.NewContentID(big.NewInt(7))
	assert.Empty(t, err)
	aCid2, err := cid.NewContentID(big.NewInt(8))
	assert.Empty(t, err)
	aCid3, err := cid.NewContentID(big.NewInt(9))
	assert.Empty(t, err)
	cids := []cid.ContentID{*aCid1, *aCid2, *aCid3}
	price := uint64(5)
	expiry := int64(10)
	qos := uint64(5)
	offer, err := NewCIDOffer(aNodeID, cids, price, expiry, qos)
	assert.Empty(t, err)
	subOffer, err := offer.GenerateSubCIDOffer(aCid1)
	assert.Empty(t, err)
	assert.NotEmpty(t, subOffer)
	p, err := subOffer.MarshalJSON()
	assert.Empty(t, err)
	assert.Equal(t, []byte{0x7b, 0x22, 0x70, 0x72, 0x6f, 0x76,
		0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x3a,
		0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x63, 0x3d,
		0x22, 0x2c, 0x22, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x69,
		0x64, 0x22, 0x3a, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x63, 0x3d, 0x22, 0x2c, 0x22, 0x6d, 0x65, 0x72,
		0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x22,
		0x3a, 0x22, 0x61, 0x37, 0x62, 0x63, 0x34, 0x61, 0x32,
		0x32, 0x32, 0x30, 0x30, 0x35, 0x38, 0x38, 0x33, 0x65,
		0x38, 0x36, 0x63, 0x61, 0x38, 0x35, 0x36, 0x30, 0x63,
		0x32, 0x66, 0x65, 0x63, 0x64, 0x37, 0x61, 0x30, 0x39,
		0x32, 0x36, 0x34, 0x34, 0x66, 0x62, 0x66, 0x38, 0x66,
		0x31, 0x65, 0x38, 0x37, 0x34, 0x65, 0x36, 0x31, 0x31,
		0x30, 0x30, 0x62, 0x39, 0x33, 0x30, 0x62, 0x39, 0x32,
		0x38, 0x65, 0x36, 0x22, 0x2c, 0x22, 0x6d, 0x65, 0x72,
		0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
		0x22, 0x3a, 0x22, 0x41, 0x41, 0x41, 0x41, 0x58, 0x31,
		0x73, 0x69, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42,
		0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51,
		0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55,
		0x46, 0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46,
		0x42, 0x51, 0x55, 0x46, 0x42, 0x51, 0x55, 0x46, 0x42,
		0x51, 0x55, 0x46, 0x42, 0x5a, 0x7a, 0x30, 0x69, 0x4c,
		0x43, 0x4a, 0x6a, 0x52, 0x30, 0x31, 0x55, 0x63, 0x57,
		0x4d, 0x32, 0x62, 0x30, 0x6c, 0x56, 0x52, 0x55, 0x68,
		0x48, 0x61, 0x6b, 0x39, 0x6f, 0x4f, 0x53, 0x74, 0x78,
		0x64, 0x6b, 0x4e, 0x75, 0x5a, 0x48, 0x4e, 0x31, 0x64,
		0x32, 0x73, 0x77, 0x4b, 0x79, 0x74, 0x73, 0x57, 0x48,
		0x42, 0x32, 0x4e, 0x56, 0x6c, 0x59, 0x4e, 0x6b, 0x35,
		0x77, 0x51, 0x6d, 0x46, 0x6e, 0x50, 0x53, 0x4a, 0x64,
		0x41, 0x41, 0x41, 0x41, 0x42, 0x56, 0x73, 0x78, 0x4c,
		0x44, 0x46, 0x64, 0x22, 0x2c, 0x22, 0x70, 0x72, 0x69,
		0x63, 0x65, 0x22, 0x3a, 0x35, 0x2c, 0x22, 0x65, 0x78,
		0x70, 0x69, 0x72, 0x79, 0x22, 0x3a, 0x31, 0x30, 0x2c,
		0x22, 0x71, 0x6f, 0x73, 0x22, 0x3a, 0x35, 0x2c, 0x22,
		0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
		0x22, 0x3a, 0x22, 0x22, 0x7d}, p)
	subOffer2 := SubCIDOffer{}
	err = subOffer2.UnmarshalJSON(p)
	assert.Empty(t, err)
	assert.Equal(t, subOffer.providerID, subOffer2.providerID)
	assert.Equal(t, subOffer.subCID, subOffer2.subCID)
	assert.Equal(t, subOffer.merkleRoot, subOffer2.merkleRoot)
	assert.Equal(t, subOffer.price, subOffer2.price)
	assert.Equal(t, subOffer.expiry, subOffer2.expiry)
	assert.Equal(t, subOffer.qos, subOffer2.qos)
	assert.Equal(t, subOffer.signature, subOffer2.signature)
	p1, err := subOffer.merkleProof.MarshalJSON()
	assert.Empty(t, err)
	p2, err := subOffer2.merkleProof.MarshalJSON()
	assert.Empty(t, err)
	assert.Equal(t, p1, p2)
	err = subOffer2.UnmarshalJSON([]byte{})
	assert.NotEmpty(t, err)
}
